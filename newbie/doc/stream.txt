
1) v2.4.8  of Akka libraries; EXCEPT for the HTTP-Experimental

2) Request-Level Client-Side API (for synchronous HTTP Requests)
   *** Future-based RESULT gets PIPED as message to Actor; NOT calling into Actor methods directly!

3) Host-Level Client-Side API (for synchronous HTTP Requests)
   *** TODO:  observe the FLOW RESULTs!

4) Connection-Level Client-Side API (for streaming HTTP Requests)
   - uses FLOW-Level API!

   *** TODO: how to CLOSE connection on command-line on debugging!
   Note that, if the source (THIS HTTP Requesting Server) produces subsequent requests before the prior responses have arrived,
   these requests will be pipelined across the connection, which is something that is not supported by all HTTP servers.
   Also, if the server closes the connection before responses to all requests have been received this will result in
   the response stream being terminated with a truncation error.

   - CLOSING connections!

   *** TODO:  HOW EXACTLY to COMPLETE the request stream -- special message?
   An application can actively trigger the closing of the connection by completing the request stream.
   In this case the underlying TCP connection will be closed when the last pending response has been received.

   Akka HTTP actively closes an established connection upon reception of a response containing
   Connection: close header. The connection can also be closed by the Server.

5) *** TODO:  Akka HTTP Timeouts!

6) TODO:  HTTP Layer and SSL Layer to MOCK flows!
